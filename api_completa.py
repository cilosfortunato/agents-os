#!/usr/bin/env python3
"""
API Completa com Sistema de Mem√≥rias Enriquecidas do Agno
Integra salvamento de mensagens e mem√≥rias contextuais usando a tabela message_history
"""

import os
import json
import uuid
from datetime import datetime
from typing import List, Dict, Any, Optional
from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import httpx
from supabase import create_client, Client
from dotenv import load_dotenv
from dual_memory_optimized_service import DualMemoryOptimizedService

# Carrega vari√°veis de ambiente
load_dotenv()

# Configura√ß√£o do Supabase
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")

if not SUPABASE_URL or not SUPABASE_KEY:
    raise ValueError("SUPABASE_URL e SUPABASE_KEY devem estar definidas no arquivo .env")

supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# Inicializar o servi√ßo de mem√≥ria dual otimizado
dual_memory_service = DualMemoryOptimizedService()

# Fun√ß√µes para integra√ß√£o com o servi√ßo de mem√≥ria dual otimizado
async def save_conversation(user_id: str, session_id: str, agent_id: str, user_message: str, agent_response: str) -> Dict[str, Any]:
    """Salva uma conversa completa na tabela mensagens_ia"""
    try:
        result = dual_memory_service.save_chat_message(
            user_id=user_id,
            session_id=session_id,
            agent_id=agent_id,
            user_message=user_message,
            agent_response=agent_response
        )
        
        print(f"Status do salvamento da conversa: {result.get('status', 'unknown')}")
        return result
                
    except Exception as e:
        print(f"Erro ao salvar conversa: {e}")
        return {"status": "error", "error": str(e)}

async def create_enriched_memory(user_id: str, session_id: str, content: str, metadata: Dict[str, Any] = None) -> Dict[str, Any]:
    """Cria uma mem√≥ria enriquecida na tabela message_history"""
    try:
        result = dual_memory_service.create_enriched_memory(
            user_id=user_id,
            session_id=session_id,
            content=content,
            metadata=metadata or {}
        )
        
        print(f"Status da cria√ß√£o de mem√≥ria enriquecida: {result.get('status', 'unknown')}")
        return result
                
    except Exception as e:
        print(f"Erro ao criar mem√≥ria enriquecida: {e}")
        return {"status": "error", "error": str(e)}

async def list_enriched_memories(user_id: str, limit: int = 10) -> List[Dict[str, Any]]:
    """Lista mem√≥rias enriquecidas do usu√°rio"""
    try:
        memories = dual_memory_service.search_enriched_memories(
            user_id=user_id,
            limit=limit
        )
        
        print(f"‚úÖ Encontradas {len(memories)} mem√≥rias enriquecidas para listagem")
        return memories
                
    except Exception as e:
        print(f"Erro ao listar mem√≥rias enriquecidas: {e}")
        return []

async def auto_enrich_conversation(user_id: str, session_id: str, user_message: str, agent_response: str):
    """Enriquece automaticamente a conversa criando uma s√≠ntese concisa"""
    try:
        memories = dual_memory_service.auto_enrich_conversation(
            user_id=user_id,
            session_id=session_id,
            user_message=user_message,
            agent_response=agent_response
        )
        
        print(f"‚úÖ Criadas {len(memories)} mem√≥rias enriquecidas automaticamente")
        return {"status": "success", "memories": memories, "count": len(memories)}
                
    except Exception as e:
        print(f"Erro no enriquecimento autom√°tico: {e}")
        return {"status": "error", "error": str(e)}

# Modelos Pydantic
class MessageInput(BaseModel):
    mensagem: str
    agent_id: str
    debounce: int = 15000
    session_id: Optional[str] = None
    message_id: str
    cliente_id: str = ""
    user_id: str
    id_conta: str

class MessageOutput(BaseModel):
    messages: List[str]
    transferir: bool = False
    session_id: str
    user_id: str
    agent_id: str
    custom: List[Dict[str, str]] = []
    agent_usage: Dict[str, Any] = {}

class MemoryRequest(BaseModel):
    user_id: str
    content: str
    metadata: Optional[Dict[str, Any]] = None

class MemoryResponse(BaseModel):
    id: str
    user_id: str
    content: str
    metadata: Dict[str, Any]
    created_at: str

class MemoryListResponse(BaseModel):
    memories: List[MemoryResponse]
    total: int

# Inicializar FastAPI
app = FastAPI(
    title="API Completa com Mem√≥rias Enriquecidas do Agno",
    description="API que integra processamento de mensagens com sistema de mem√≥rias contextuais",
    version="2.0.0"
)

# Fun√ß√µes antigas removidas - agora usando DualMemoryOptimizedService

def simulate_agent_response(message: str, context: Dict[str, Any]) -> Dict[str, Any]:
    """Simula resposta do agente com contexto enriquecido"""
    
    # Contexto das mem√≥rias
    memories = context.get("memories", [])
    history = context.get("history", [])
    
    # Contexto adicional baseado em mem√≥rias
    memory_context = ""
    if memories:
        memory_context = f"\n\nContexto de mem√≥rias anteriores: {len(memories)} intera√ß√µes relevantes encontradas."
    
    # Respostas baseadas em palavras-chave
    message_lower = message.lower()
    
    if "hor√°rio" in message_lower or "funciona" in message_lower:
        response = f"A Cl√≠nica Nutri+ funciona de **segunda a sexta-feira, das 8h √†s 18h**. Fazemos uma pausa para o almo√ßo entre 12h e 13h.{memory_context}\nPosso ajudar com mais alguma informa√ß√£o ou gostaria de agendar sua consulta ou o Plano Nutricional Online?"
    elif "pre√ßo" in message_lower or "valor" in message_lower:
        response = f"Nossos valores variam conforme o tipo de consulta:{memory_context}\n\n‚Ä¢ **Consulta Presencial**: R$ 150,00\n‚Ä¢ **Consulta Online**: R$ 120,00\n‚Ä¢ **Plano Nutricional Completo**: R$ 200,00\n\nGostaria de agendar uma consulta?"
    elif "agend" in message_lower:
        response = f"√ìtimo! Para agendar sua consulta:{memory_context}\n\nüìû **Telefone**: (11) 9999-9999\nüíª **WhatsApp**: (11) 9999-9999\nüìß **E-mail**: contato@nutriplus.com\n\nQual tipo de consulta voc√™ prefere: presencial ou online?"
    else:
        response = f"Ol√°! Sou o assistente da Cl√≠nica Nutri+.{memory_context}\n\nPosso ajudar com:\n‚Ä¢ Informa√ß√µes sobre hor√°rios\n‚Ä¢ Valores das consultas\n‚Ä¢ Agendamentos\n‚Ä¢ Planos nutricionais\n\nComo posso ajudar voc√™ hoje?"
    
    return {
        "response": response,
        "usage": {
            "input_tokens": len(message.split()),
            "output_tokens": len(response.split()),
            "model": "google/gemini-2.5-flash-lite"
        }
    }

@app.post("/v1/chat", response_model=MessageOutput)
async def process_message(request: List[MessageInput]):
    """Processa mensagem com sistema de mem√≥rias enriquecidas"""
    try:
        if not request or len(request) == 0:
            raise HTTPException(status_code=400, detail="Lista de mensagens vazia")
        
        # Pegar primeira mensagem
        msg_input = request[0]
        
        # Gerar session_id se n√£o fornecido
        if not msg_input.session_id:
            msg_input.session_id = str(uuid.uuid4())
        
        # Gerar message_id se n√£o fornecido
        if not msg_input.message_id:
            msg_input.message_id = str(uuid.uuid4())
        
        print(f"üîÑ Processando mensagem para user_id: {msg_input.user_id}, agent_id: {msg_input.agent_id}")
        
        # 1. Buscar mem√≥rias enriquecidas relevantes
        memories = await list_enriched_memories(msg_input.user_id, limit=5)
        
        # 2. Preparar contexto para o agente
        context = {
            "memories": memories,
            "user_id": msg_input.user_id,
            "agent_id": msg_input.agent_id,
            "session_id": msg_input.session_id
        }
        
        # 3. Gerar resposta do agente
        agent_result = simulate_agent_response(msg_input.mensagem, context)
        response_text = agent_result["response"]
        usage_info = agent_result["usage"]
        
        # 4. Salvar conversa completa na tabela mensagens_ia
        await save_conversation(
            user_id=msg_input.user_id,
            session_id=msg_input.session_id,
            agent_id=msg_input.agent_id,
            user_message=msg_input.mensagem,
            agent_response=response_text
        )
        
        # 5. Enriquecer automaticamente a conversa
        await auto_enrich_conversation(
            user_id=msg_input.user_id,
            session_id=msg_input.session_id,
            user_message=msg_input.mensagem,
            agent_response=response_text
        )
        
        # 8. Preparar resposta
        response = MessageOutput(
            messages=[response_text],
            transferir=False,
            session_id=msg_input.session_id,
            user_id=msg_input.user_id,
            agent_id=msg_input.agent_id,
            custom=[
                {"campo": "pdf", "valor": "catalogo_doces"}
            ],
            agent_usage={
                "input_tokens": usage_info["input_tokens"],
                "output_tokens": usage_info["output_tokens"],
                "model": usage_info["model"]
            }
        )
        
        print(f"‚úÖ Resposta gerada com contexto enriquecido")
        return response
        
    except Exception as e:
        print(f"‚ùå Erro ao processar mensagem: {e}")
        raise HTTPException(status_code=500, detail=f"Erro interno: {str(e)}")

@app.post("/v1/memory/create")
async def create_memory_endpoint(request: MemoryRequest):
    """Endpoint para criar mem√≥rias enriquecidas manualmente"""
    try:
        # Extrair session_id dos metadados ou gerar um novo
        session_id = request.metadata.get("session_id") if request.metadata else str(uuid.uuid4())
        
        result = await create_enriched_memory(
            user_id=request.user_id,
            session_id=session_id,
            content=request.content,
            metadata=request.metadata
        )
        return result
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erro ao criar mem√≥ria: {str(e)}")

@app.get("/v1/memory/list/{user_id}")
async def list_memories_endpoint(user_id: str, limit: int = 10):
    """Endpoint para listar mem√≥rias enriquecidas"""
    try:
        result = await list_enriched_memories(user_id=user_id, limit=limit)
        return {"memories": result, "total": len(result)}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erro ao listar mem√≥rias: {str(e)}")

@app.get("/v1/memory/stats/{user_id}")
async def get_memory_stats(user_id: str, agent_id: Optional[str] = None):
    """Endpoint para obter estat√≠sticas de mem√≥rias enriquecidas"""
    try:
        memories = await list_enriched_memories(user_id=user_id, limit=100)
        return {
            "user_id": user_id,
            "total_memories": len(memories),
            "agent_id": agent_id,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erro ao obter estat√≠sticas: {str(e)}")

@app.get("/v1/conversations/{user_id}")
async def get_user_conversations(user_id: str, limit: int = 20):
    """Endpoint para obter hist√≥rico de conversas brutas do usu√°rio"""
    try:
        result = dual_memory_service.get_conversation_history(user_id=user_id, limit=limit)
        
        if result.get("status") == "success":
            return {"conversations": result.get("conversations", []), "total": len(result.get("conversations", []))}
        else:
            return {"conversations": [], "total": 0, "error": result.get("error")}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erro ao obter conversas: {str(e)}")

@app.get("/v1/history/{session_id}")
async def get_session_history(session_id: str, user_id: str, limit: int = 20):
    """Endpoint para obter hist√≥rico de uma sess√£o"""
    try:
        history = get_conversation_history(session_id, user_id, limit)
        return {
            "session_id": session_id,
            "user_id": user_id,
            "messages": history,
            "count": len(history)
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erro ao obter hist√≥rico: {str(e)}")

@app.get("/health")
async def health_check():
    """Endpoint de verifica√ß√£o de sa√∫de da arquitetura dual"""
    try:
        # Testar conex√£o com tabela mensagens_ia
        mensagens_test = supabase.table("mensagens_ia").select("id").limit(1).execute()
        
        # Testar conex√£o com tabela message_history
        memory_test = supabase.table("message_history").select("id").limit(1).execute()
        
        # Testar servi√ßo de mem√≥ria dual
        dual_service_test = await list_enriched_memories("health-check", limit=1)
        
        return {
            "status": "healthy",
            "database": "connected",
            "mensagens_ia_table": "operational",
            "message_history_table": "operational", 
            "dual_memory_service": "operational",
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        return {
            "status": "unhealthy",
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }

@app.get("/")
async def root():
    """Endpoint raiz com informa√ß√µes da API"""
    return {
        "name": "API Completa com Mem√≥rias Enriquecidas do Agno",
        "version": "2.0.0",
        "description": "API que integra processamento de mensagens com sistema de mem√≥rias contextuais",
        "endpoints": {
            "chat": "/v1/chat",
            "create_memory": "/v1/memory/create",
            "list_memories": "/v1/memory/list",
            "memory_stats": "/v1/memory/stats/{user_id}",
            "session_history": "/v1/history/{session_id}",
            "health": "/health"
        },
        "features": [
            "Processamento de mensagens com contexto",
            "Sistema de mem√≥rias enriquecidas",
            "Hist√≥rico de conversas persistente",
            "An√°lise autom√°tica de t√≥picos",
            "Estat√≠sticas de uso"
        ]
    }

# Configurar CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

if __name__ == "__main__":
    import uvicorn
    print("üöÄ Iniciando API Completa com Mem√≥rias Enriquecidas do Agno...")
    print("üìä Recursos dispon√≠veis:")
    print("  ‚Ä¢ Processamento de mensagens com contexto")
    print("  ‚Ä¢ Sistema de mem√≥rias enriquecidas")
    print("  ‚Ä¢ Hist√≥rico persistente de conversas")
    print("  ‚Ä¢ An√°lise autom√°tica de t√≥picos")
    print("  ‚Ä¢ Endpoints de gerenciamento de mem√≥rias")
    print("\nüåê Acesse: http://localhost:8000/docs para documenta√ß√£o interativa")
    
    uvicorn.run(app, host="0.0.0.0", port=8000)