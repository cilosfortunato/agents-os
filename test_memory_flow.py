#!/usr/bin/env python3
"""
Teste espec√≠fico do fluxo de mem√≥ria no processamento de mensagens
"""

import requests
import json
import time
import uuid
from datetime import datetime

# Configura√ß√µes
BASE_URL = "http://localhost:80"
API_KEY = "151fb361-f295-4a4f-84c9-ec1f42599a67"
HEADERS = {
    "Content-Type": "application/json",
    "X-API-Key": API_KEY
}

def test_memory_flow():
    """Testa o fluxo completo de mem√≥ria"""
    print("=" * 60)
    print("TESTE DO FLUXO COMPLETO DE MEM√ìRIA")
    print("=" * 60)
    
    # Gera IDs √∫nicos para o teste
    user_id = f"test_user_{int(time.time())}"
    session_id = str(uuid.uuid4())
    
    print(f"üë§ User ID: {user_id}")
    print(f"üîó Session ID: {session_id}")
    
    # 1. Busca agentes dispon√≠veis
    print("\n1Ô∏è‚É£ Buscando agentes dispon√≠veis...")
    try:
        response = requests.get(f"{BASE_URL}/v1/agents", headers=HEADERS, timeout=10)
        if response.status_code == 200:
            agents_data = response.json()
            agents = agents_data.get("agents", [])
            if agents:
                agent_id = agents[0]["id"]
                agent_name = agents[0]["name"]
                print(f"‚úÖ Agente encontrado: {agent_name} (ID: {agent_id})")
            else:
                print("‚ùå Nenhum agente encontrado")
                return False
        else:
            print(f"‚ùå Erro ao buscar agentes: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")
        return False
    
    # 2. Envia primeira mensagem (informa√ß√µes pessoais)
    print("\n2Ô∏è‚É£ Enviando primeira mensagem com informa√ß√µes pessoais...")
    message_1 = {
        "mensagem": "Ol√°! Meu nome √© Carlos e tenho 35 anos. Trabalho como engenheiro de software.",
        "agent_id": agent_id,
        "user_id": user_id,
        "session_id": session_id,
        "message_id": str(uuid.uuid4()),
        "debounce": 5000  # 5 segundos para teste r√°pido
    }
    
    try:
        response = requests.post(f"{BASE_URL}/v1/messages", headers=HEADERS, json=message_1, timeout=10)
        print(f"Status: {response.status_code}")
        if response.status_code == 200:
            print("‚úÖ Primeira mensagem enviada com sucesso")
        else:
            print(f"‚ùå Erro: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")
        return False
    
    # 3. Aguarda processamento
    print("\n‚è≥ Aguardando processamento (8 segundos)...")
    time.sleep(8)
    
    # 4. Envia segunda mensagem (pergunta sobre informa√ß√µes anteriores)
    print("\n3Ô∏è‚É£ Enviando segunda mensagem perguntando sobre informa√ß√µes anteriores...")
    message_2 = {
        "mensagem": "Voc√™ lembra qual √© meu nome e minha idade?",
        "agent_id": agent_id,
        "user_id": user_id,
        "session_id": session_id,
        "message_id": str(uuid.uuid4()),
        "debounce": 5000
    }
    
    try:
        response = requests.post(f"{BASE_URL}/v1/messages", headers=HEADERS, json=message_2, timeout=10)
        print(f"Status: {response.status_code}")
        if response.status_code == 200:
            print("‚úÖ Segunda mensagem enviada com sucesso")
        else:
            print(f"‚ùå Erro: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")
        return False
    
    # 5. Aguarda processamento
    print("\n‚è≥ Aguardando processamento (8 segundos)...")
    time.sleep(8)
    
    # 6. Testa busca direta na mem√≥ria
    print("\n4Ô∏è‚É£ Testando busca direta na mem√≥ria...")
    try:
        response = requests.get(
            f"{BASE_URL}/v1/memory/search",
            headers=HEADERS,
            params={
                "user_id": user_id,
                "query": "nome idade Carlos",
                "limit": 5
            },
            timeout=10
        )
        
        print(f"Status: {response.status_code}")
        if response.status_code == 200:
            memory_data = response.json()
            memories = memory_data.get("memories", [])
            print(f"‚úÖ Mem√≥rias encontradas: {len(memories)}")
            
            if memories:
                print("üìã Mem√≥rias:")
                for i, memory in enumerate(memories, 1):
                    print(f"   {i}. {memory}")
            else:
                print("‚ö†Ô∏è Nenhuma mem√≥ria encontrada")
        else:
            print(f"‚ùå Erro na busca: {response.text}")
    except Exception as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")
    
    # 7. Testa nova sess√£o com mesmo usu√°rio
    print("\n5Ô∏è‚É£ Testando nova sess√£o com mesmo usu√°rio...")
    new_session_id = str(uuid.uuid4())
    print(f"üîó Nova Session ID: {new_session_id}")
    
    message_3 = {
        "mensagem": "Ol√° novamente! Voc√™ se lembra de mim?",
        "agent_id": agent_id,
        "user_id": user_id,
        "session_id": new_session_id,
        "message_id": str(uuid.uuid4()),
        "debounce": 5000
    }
    
    try:
        response = requests.post(f"{BASE_URL}/v1/messages", headers=HEADERS, json=message_3, timeout=10)
        print(f"Status: {response.status_code}")
        if response.status_code == 200:
            print("‚úÖ Mensagem em nova sess√£o enviada com sucesso")
        else:
            print(f"‚ùå Erro: {response.text}")
    except Exception as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")
    
    print("\n‚è≥ Aguardando processamento final (8 segundos)...")
    time.sleep(8)
    
    return True

def test_direct_memory_operations():
    """Testa opera√ß√µes diretas de mem√≥ria"""
    print("\n" + "=" * 60)
    print("TESTE DE OPERA√á√ïES DIRETAS DE MEM√ìRIA")
    print("=" * 60)
    
    user_id = f"direct_test_{int(time.time())}"
    
    # 1. Adiciona mem√≥ria diretamente
    print("\n1Ô∏è‚É£ Adicionando mem√≥ria diretamente...")
    memory_data = {
        "user_id": user_id,
        "content": "O usu√°rio se chama Roberto e tem 28 anos. Gosta de programa√ß√£o Python.",
        "metadata": {"test": "direct_add", "timestamp": datetime.now().isoformat()}
    }
    
    try:
        response = requests.post(f"{BASE_URL}/v1/memory/add", headers=HEADERS, json=memory_data, timeout=10)
        print(f"Status: {response.status_code}")
        if response.status_code == 200:
            print("‚úÖ Mem√≥ria adicionada diretamente")
            print(f"üìä Resposta: {response.json()}")
        else:
            print(f"‚ùå Erro: {response.text}")
    except Exception as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")
    
    # 2. Busca a mem√≥ria adicionada
    print("\n2Ô∏è‚É£ Buscando mem√≥ria adicionada...")
    try:
        response = requests.get(
            f"{BASE_URL}/v1/memory/search",
            headers=HEADERS,
            params={
                "user_id": user_id,
                "query": "Roberto Python",
                "limit": 3
            },
            timeout=10
        )
        
        print(f"Status: {response.status_code}")
        if response.status_code == 200:
            memory_data = response.json()
            memories = memory_data.get("memories", [])
            print(f"‚úÖ Mem√≥rias encontradas: {len(memories)}")
            
            if memories:
                print("üìã Mem√≥rias:")
                for i, memory in enumerate(memories, 1):
                    print(f"   {i}. {memory}")
            else:
                print("‚ö†Ô∏è Nenhuma mem√≥ria encontrada")
        else:
            print(f"‚ùå Erro na busca: {response.text}")
    except Exception as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")

if __name__ == "__main__":
    print("üß™ TESTE COMPLETO DO FLUXO DE MEM√ìRIA")
    print("=" * 60)
    
    # Testa fluxo completo
    flow_success = test_memory_flow()
    
    # Testa opera√ß√µes diretas
    test_direct_memory_operations()
    
    print("\n" + "=" * 60)
    print("RESUMO DOS TESTES")
    print("=" * 60)
    print(f"Fluxo Completo: {'‚úÖ' if flow_success else '‚ùå'}")
    print("\nüí° Dica: Verifique os logs do webhook para ver as respostas do agente")
    print("   Use: python -c \"import requests; print(requests.get('http://localhost:9000/logs').text)\"")