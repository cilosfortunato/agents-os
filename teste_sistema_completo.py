#!/usr/bin/env python3
"""
Teste Final Integrado do Sistema AgentOS
Verifica se todos os componentes est√£o funcionando em conjunto
"""

import os
import json
import requests
import time
from datetime import datetime
from dotenv import load_dotenv

# Carrega vari√°veis de ambiente
load_dotenv()

def test_api_completa():
    """Testa a API completa com um agente real"""
    print("üß™ TESTANDO API COMPLETA...")
    
    try:
        # Dados de teste baseados na estrutura fornecida
        test_data = {
            "mensagem": "Ol√°, como voc√™ pode me ajudar?",
            "agent_id": "1677dc47-20d0-442a-80a8-171f00d39d39",
            "debounce": 15000,
            "session_id": "test-session-" + str(int(time.time())),
            "message_id": "test-msg-" + str(int(time.time())),
            "cliente_id": "",
            "user_id": "test-user@lid",
            "id_conta": "f7dae33c-6364-4d88-908f-f5f64426a5c9"
        }
        
        # Testa endpoint local
        url = "http://localhost:8000/v1/chat"
        headers = {
            "Content-Type": "application/json",
            "X-API-Key": os.getenv("API_AUTH_KEY", "151fb361-f295-4a4f-84c9-ec1f42599a67")
        }
        
        print(f"üì° Enviando requisi√ß√£o para: {url}")
        print(f"üìã Dados: {json.dumps(test_data, indent=2)}")
        
        response = requests.post(url, json=[test_data], headers=headers, timeout=30)
        
        print(f"üìä Status: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Resposta recebida:")
            print(json.dumps(result, indent=2, ensure_ascii=False))
            
            # Verifica estrutura da resposta
            if "messages" in result and len(result["messages"]) > 0:
                print("‚úÖ Estrutura de resposta v√°lida")
                return True
            else:
                print("‚ùå Estrutura de resposta inv√°lida")
                return False
        else:
            print(f"‚ùå Erro na API: {response.status_code}")
            print(f"üìù Resposta: {response.text}")
            return False
            
    except requests.exceptions.ConnectionError:
        print("‚ùå Erro de conex√£o - API n√£o est√° rodando?")
        return False
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        return False

def test_webhook_connectivity():
    """Testa conectividade com o webhook"""
    print("\nüîó TESTANDO CONECTIVIDADE DO WEBHOOK...")
    
    webhook_url = os.getenv("OUTBOUND_WEBHOOK_URL")
    if not webhook_url:
        print("‚ùå URL do webhook n√£o configurada")
        return False
    
    try:
        response = requests.get(webhook_url, timeout=10)
        print(f"üìä Status do webhook: {response.status_code}")
        
        # 404 √© esperado para GET, mas indica que o servidor est√° respondendo
        if response.status_code in [200, 404, 405]:
            print("‚úÖ Webhook acess√≠vel")
            return True
        else:
            print(f"‚ö†Ô∏è Webhook retornou status inesperado: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao acessar webhook: {e}")
        return False

def test_environment_variables():
    """Verifica se todas as vari√°veis essenciais est√£o configuradas"""
    print("\nüîß VERIFICANDO VARI√ÅVEIS DE AMBIENTE...")
    
    required_vars = [
        "OPENAI_API_KEY",
        "SUPABASE_URL", 
        "SUPABASE_SERVICE_ROLE_KEY",
        "OUTBOUND_WEBHOOK_URL",
        "MEM0_API_KEY"
    ]
    
    missing_vars = []
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
        else:
            print(f"‚úÖ {var}: Configurada")
    
    if missing_vars:
        print(f"‚ùå Vari√°veis faltando: {missing_vars}")
        return False
    else:
        print("‚úÖ Todas as vari√°veis essenciais configuradas")
        return True

def main():
    """Executa todos os testes"""
    print("=" * 60)
    print("üöÄ TESTE FINAL INTEGRADO DO SISTEMA AGNOS")
    print("=" * 60)
    
    results = []
    
    # Teste 1: Vari√°veis de ambiente
    env_ok = test_environment_variables()
    results.append(("Vari√°veis de Ambiente", env_ok))
    
    # Teste 2: Conectividade do webhook
    webhook_ok = test_webhook_connectivity()
    results.append(("Conectividade Webhook", webhook_ok))
    
    # Teste 3: API completa (s√≥ se as outras passaram)
    if env_ok:
        api_ok = test_api_completa()
        results.append(("API Completa", api_ok))
    else:
        print("\n‚è≠Ô∏è Pulando teste da API devido a problemas de configura√ß√£o")
        results.append(("API Completa", False))
    
    # Relat√≥rio final
    print("\n" + "=" * 60)
    print("üìä RELAT√ìRIO FINAL DOS TESTES")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nüìà Resultado: {passed}/{total} testes passaram")
    
    if passed == total:
        print("üéâ SISTEMA TOTALMENTE FUNCIONAL!")
        return True
    elif passed >= total * 0.7:  # 70% ou mais
        print("‚ö†Ô∏è SISTEMA PARCIALMENTE FUNCIONAL")
        return True
    else:
        print("‚ùå SISTEMA COM PROBLEMAS CR√çTICOS")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)