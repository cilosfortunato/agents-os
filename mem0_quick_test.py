#!/usr/bin/env python3
"""
Teste r√°pido e limpo do Mem0 para identificar lat√™ncia
"""

import time
import os
from mem0 import MemoryClient
from dotenv import load_dotenv

load_dotenv()

def test_mem0_operations():
    """Testa opera√ß√µes b√°sicas do Mem0 com medi√ß√£o de tempo"""
    print("üîç TESTE R√ÅPIDO DE LAT√äNCIA DO MEM0")
    print("=" * 50)
    
    try:
        client = MemoryClient()
        test_user = "latency_test_user"
        
        # Teste 1: Busca simples
        print("1Ô∏è‚É£ Testando busca simples...")
        start_time = time.time()
        try:
            memories = client.search(
                query="teste de lat√™ncia",
                user_id=test_user,
                limit=3
            )
            elapsed = time.time() - start_time
            print(f"   ‚úÖ Busca: {elapsed:.3f}s - {len(memories) if memories else 0} resultados")
            
        except Exception as e:
            elapsed = time.time() - start_time
            print(f"   ‚ùå Erro na busca ({elapsed:.3f}s): {e}")
        
        # Teste 2: Adicionar mem√≥ria
        print("2Ô∏è‚É£ Testando adicionar mem√≥ria...")
        start_time = time.time()
        try:
            messages = [
                {"role": "user", "content": "Teste de performance"},
                {"role": "assistant", "content": "Resposta r√°pida"}
            ]
            result = client.add(
                messages=messages,
                user_id=test_user
            )
            elapsed = time.time() - start_time
            print(f"   ‚úÖ Adicionar: {elapsed:.3f}s - Sucesso: {bool(result)}")
            
        except Exception as e:
            elapsed = time.time() - start_time
            print(f"   ‚ùå Erro ao adicionar ({elapsed:.3f}s): {e}")
        
        # Teste 3: Busca ap√≥s adicionar
        print("3Ô∏è‚É£ Testando busca ap√≥s adicionar...")
        start_time = time.time()
        try:
            memories = client.search(
                query="performance",
                user_id=test_user,
                limit=5
            )
            elapsed = time.time() - start_time
            print(f"   ‚úÖ Busca p√≥s-add: {elapsed:.3f}s - {len(memories) if memories else 0} resultados")
            
        except Exception as e:
            elapsed = time.time() - start_time
            print(f"   ‚ùå Erro na busca p√≥s-add ({elapsed:.3f}s): {e}")
            
    except Exception as e:
        print(f"‚ùå Erro ao inicializar cliente: {e}")
    
    print("\n" + "=" * 50)
    print("üèÅ TESTE CONCLU√çDO")

if __name__ == "__main__":
    test_mem0_operations()