import requests
import json
import time

# Configura√ß√£o da API
API_BASE = "http://localhost:7777"
HEADERS = {"Content-Type": "application/json"}

def criar_agente_memoria():
    """Cria um agente espec√≠fico para teste de mem√≥ria"""
    agent_data = {
        "name": "assistente_memoria",
        "role": "Assistente Pessoal com Mem√≥ria",
        "description": "Assistente que deve lembrar de informa√ß√µes pessoais dos usu√°rios",
        "instructions": [
            "Voc√™ √© um assistente pessoal que SEMPRE deve usar as informa√ß√µes do contexto de conversas anteriores para personalizar suas respostas.",
            "Se voc√™ receber informa√ß√µes sobre o usu√°rio no contexto, SEMPRE mencione essas informa√ß√µes em sua resposta para mostrar que voc√™ lembra.",
            "Por exemplo, se souber o nome do usu√°rio, sempre o chame pelo nome.",
            "Seja caloroso e pessoal em suas respostas, demonstrando que voc√™ lembra das informa√ß√µes compartilhadas."
        ],
        "model": "google/gemini-2.0-flash-exp",
        "temperature": 0.1
    }
    
    response = requests.post(f"{API_BASE}/agents", json=agent_data, headers=HEADERS)
    if response.status_code == 200:
        result = response.json()
        agent = result.get('agent', {})
        agent_name = agent.get('name', 'N/A')
        print(f"‚úÖ Agente criado: {agent_name}")
        return agent_name  # Retorna o nome do agente em vez do ID
    else:
        print(f"‚ùå Erro ao criar agente: {response.text}")
        return None

def criar_time_memoria(agent_id):
    """Cria um time com o agente de mem√≥ria"""
    team_data = {
        "name": "time_memoria_teste",
        "description": "Time para testar funcionalidade de mem√≥ria",
        "agent_names": ["assistente_principal"]
    }
    
    response = requests.post(f"{API_BASE}/teams", json=team_data, headers=HEADERS)
    if response.status_code == 200:
        result = response.json()
        team = result.get('team', {})
        team_name = team.get('name', 'N/A')
        team_id = team.get('id', 'N/A')
        print(f"‚úÖ Time criado: {team_name} (ID: {team_id})")
        return team_id
    else:
        print(f"‚ùå Erro ao criar time: {response.text}")
        return None

def conversar_com_time(team_id, message, user_id="teste_memoria_detalhado"):
    """Envia mensagem para o time"""
    chat_data = {
        "message": message,
        "user_id": user_id,
        "team_id": team_id if team_id != "N/A" else "time_memoria_teste"
    }
    
    print(f"[DEBUG] Enviando para: {API_BASE}/teams/run")
    print(f"[DEBUG] Payload: {chat_data}")
    
    endpoint = f"{API_BASE}/teams/run"
    
    response = requests.post(endpoint, json=chat_data, headers=HEADERS)
    if response.status_code == 200:
        result = response.json()
        return result.get('response', 'Sem resposta')
    else:
        print(f"‚ùå Erro na conversa: {response.text}")
        return None

def main():
    print("üß™ TESTE DETALHADO DE MEM√ìRIA")
    print("=" * 50)
    
    # Usar agente padr√£o existente
    agent_name = "Assistente Principal"
    print(f"‚úÖ Usando agente padr√£o: {agent_name}")
    
    # 2. Criar time
    team_id = criar_time_memoria(agent_name)
    if not team_id:
        return
    
    user_id = "teste_memoria_detalhado_user"
    
    print("\nüìù FASE 1: Estabelecendo informa√ß√µes pessoais")
    print("-" * 50)
    
    # 3. Primeira conversa - estabelecer informa√ß√µes
    mensagem1 = "Ol√°! Meu nome √© Maria Silva e sou m√©dica pediatra. Trabalho no Hospital S√£o Lucas h√° 5 anos."
    resposta1 = conversar_com_time(team_id, mensagem1, user_id)
    print(f"üë§ Usu√°rio: {mensagem1}")
    print(f"ü§ñ Assistente: {resposta1}")
    
    time.sleep(2)
    
    # 4. Segunda conversa - mais informa√ß√µes
    mensagem2 = "Tenho 32 anos e moro em S√£o Paulo. Gosto muito de ler livros de fic√ß√£o cient√≠fica nas horas vagas."
    resposta2 = conversar_com_time(team_id, mensagem2, user_id)
    print(f"\nüë§ Usu√°rio: {mensagem2}")
    print(f"ü§ñ Assistente: {resposta2}")
    
    time.sleep(2)
    
    print("\nüß† FASE 2: Testando recupera√ß√£o de mem√≥ria")
    print("-" * 50)
    
    # 5. Terceira conversa - teste de mem√≥ria
    mensagem3 = "Voc√™ pode me recomendar um livro?"
    resposta3 = conversar_com_time(team_id, mensagem3, user_id)
    print(f"üë§ Usu√°rio: {mensagem3}")
    print(f"ü§ñ Assistente: {resposta3}")
    
    time.sleep(2)
    
    # 6. Quarta conversa - teste espec√≠fico
    mensagem4 = "Qual √© minha profiss√£o mesmo?"
    resposta4 = conversar_com_time(team_id, mensagem4, user_id)
    print(f"\nüë§ Usu√°rio: {mensagem4}")
    print(f"ü§ñ Assistente: {resposta4}")
    
    time.sleep(2)
    
    # 7. Quinta conversa - teste de nome
    mensagem5 = "Como voc√™ me chamaria?"
    resposta5 = conversar_com_time(team_id, mensagem5, user_id)
    print(f"\nüë§ Usu√°rio: {mensagem5}")
    print(f"ü§ñ Assistente: {resposta5}")
    
    print("\nüìä AN√ÅLISE DOS RESULTADOS")
    print("=" * 50)
    
    # Verificar se o assistente usou as informa√ß√µes
    nome_mencionado = any("Maria" in resp for resp in [resposta3, resposta4, resposta5] if resp)
    profissao_mencionada = any("m√©dica" in resp.lower() or "pediatra" in resp.lower() for resp in [resposta3, resposta4, resposta5] if resp)
    cidade_mencionada = any("S√£o Paulo" in resp for resp in [resposta3, resposta4, resposta5] if resp)
    hobby_mencionado = any("fic√ß√£o cient√≠fica" in resp.lower() for resp in [resposta3, resposta4, resposta5] if resp)
    
    print(f"‚úÖ Nome (Maria) mencionado: {'SIM' if nome_mencionado else 'N√ÉO'}")
    print(f"‚úÖ Profiss√£o (m√©dica/pediatra) mencionada: {'SIM' if profissao_mencionada else 'N√ÉO'}")
    print(f"‚úÖ Cidade (S√£o Paulo) mencionada: {'SIM' if cidade_mencionada else 'N√ÉO'}")
    print(f"‚úÖ Hobby (fic√ß√£o cient√≠fica) mencionado: {'SIM' if hobby_mencionado else 'N√ÉO'}")
    
    score = sum([nome_mencionado, profissao_mencionada, cidade_mencionada, hobby_mencionado])
    print(f"\nüéØ SCORE DE MEM√ìRIA: {score}/4 ({score*25}%)")
    
    if score >= 3:
        print("üéâ EXCELENTE! O sistema de mem√≥ria est√° funcionando muito bem!")
    elif score >= 2:
        print("üëç BOM! O sistema de mem√≥ria est√° funcionando parcialmente.")
    elif score >= 1:
        print("‚ö†Ô∏è REGULAR! O sistema de mem√≥ria precisa de melhorias.")
    else:
        print("‚ùå RUIM! O sistema de mem√≥ria n√£o est√° funcionando adequadamente.")

if __name__ == "__main__":
    main()