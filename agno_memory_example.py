"""
Exemplo de configura√ß√£o do MemoryManager do Agno com instru√ß√µes personalizadas
para captura seletiva de mem√≥rias seguindo o padr√£o de s√≠ntese concisa.
"""

import os
from agno.db.postgres import PostgresDb
from agno.memory import MemoryManager
from agno.models.openai import OpenAIChat
from agno.models.message import Message
from rich.pretty import pprint

# Configura√ß√£o do banco de dados (ajuste conforme sua configura√ß√£o)
db_url = "postgresql+psycopg://ai:ai@localhost:5532/ai"
memory_db = PostgresDb(db_url=db_url)

# Instru√ß√µes personalizadas para captura de mem√≥ria seguindo o padr√£o especificado
MEMORY_CAPTURE_INSTRUCTIONS = """
Resuma cada intera√ß√£o usu√°rio-agente em um √∫nico registro objetivo, extraindo o interesse principal do usu√°rio e a informa√ß√£o central fornecida pelo agente.

N√£o armazene todo o hist√≥rico de mensagens nem dados irrelevantes. A mem√≥ria enriquecida deve conter apenas:

1. O que o usu√°rio demonstrou interesse de forma expl√≠cita (ex: produto, servi√ßo, d√∫vida concreta)
2. O que o agente respondeu de importante, especialmente valores, condi√ß√µes, disponibilidade, prazos ou recomenda√ß√µes.

Siga a estrutura:
"Usu√°rio demonstrou interesse em [assunto ou produto] e quis saber [detalhe/specificidade]. Informado pelo agente que [resumo da resposta principal, incluindo valores, condi√ß√µes etc.]."

Exemplos:
- Se o usu√°rio perguntar: "Voc√™s t√™m botox? Qual o pre√ßo?"
  E o agente responder: "Sim, temos, o valor √© 1500 reais por 1ml."
  Ent√£o, salve na mem√≥ria: "Usu√°rio demonstrou interesse em botox e quis saber o pre√ßo. Agente informou que o valor √© 1500 reais por 1ml."

Adote frases claras, sem citar nomes pr√≥prios nem mensagens literais, e prefira sempre o resumo do sentido principal da troca para facilitar buscas e personaliza√ß√£o futuras.

Ignore:
- Cumprimentos e sauda√ß√µes
- Mensagens muito curtas ou sem conte√∫do substantivo
- Conversas casuais sem interesse comercial ou informativo espec√≠fico
- Nomes pr√≥prios e dados pessoais irrelevantes
"""

# Configura√ß√£o do MemoryManager com instru√ß√µes personalizadas
memory_manager = MemoryManager(
    model=OpenAIChat(id="gpt-4o"),
    memory_capture_instructions=MEMORY_CAPTURE_INSTRUCTIONS,
    db=memory_db,
)

def exemplo_captura_memoria_texto():
    """Exemplo de captura de mem√≥ria a partir de texto simples"""
    
    user_id = "cliente_exemplo@email.com"
    
    # Exemplo 1: Interesse em hor√°rios
    texto_interacao = """
    Usu√°rio: Qual hor√°rio voc√™s funcionam?
    Agente: Funcionamos de segunda a sexta-feira, das 8h √†s 18h, com pausa para almo√ßo das 12h √†s 13h.
    """
    
    print("=== Exemplo 1: Captura de mem√≥ria sobre hor√°rios ===")
    memory_manager.create_user_memories(
        message=texto_interacao,
        user_id=user_id,
    )
    
    # Exemplo 2: Interesse em pre√ßos
    texto_interacao_2 = """
    Usu√°rio: Voc√™s t√™m botox? Qual o pre√ßo?
    Agente: Sim, temos botox dispon√≠vel. O valor √© 1500 reais por 1ml.
    """
    
    print("=== Exemplo 2: Captura de mem√≥ria sobre pre√ßos ===")
    memory_manager.create_user_memories(
        message=texto_interacao_2,
        user_id=user_id,
    )

def exemplo_captura_memoria_mensagens():
    """Exemplo de captura de mem√≥ria a partir de lista de mensagens"""
    
    user_id = "cliente_exemplo_2@email.com"
    
    # Conversa sobre agendamento
    mensagens = [
        Message(role="user", content="Oi, gostaria de agendar uma consulta"),
        Message(role="assistant", content="Ol√°! Claro, posso ajudar com o agendamento."),
        Message(role="user", content="Que hor√°rios voc√™s t√™m dispon√≠veis?"),
        Message(role="assistant", content="Temos hor√°rios dispon√≠veis na ter√ßa-feira √†s 14h e na quinta-feira √†s 10h."),
        Message(role="user", content="Perfeito, quero a ter√ßa √†s 14h"),
        Message(role="assistant", content="Agendamento confirmado para ter√ßa-feira √†s 14h. Enviaremos uma confirma√ß√£o por WhatsApp."),
    ]
    
    print("=== Exemplo 3: Captura de mem√≥ria de conversa sobre agendamento ===")
    memory_manager.create_user_memories(
        messages=mensagens,
        user_id=user_id,
    )

def buscar_memorias_usuario(user_id: str):
    """Busca e exibe as mem√≥rias de um usu√°rio"""
    
    print(f"\n=== Mem√≥rias do usu√°rio {user_id} ===")
    memories = memory_manager.get_user_memories(user_id=user_id)
    pprint(memories)

def exemplo_busca_contextual(user_id: str, query: str):
    """Exemplo de busca contextual de mem√≥rias"""
    
    print(f"\n=== Busca contextual: '{query}' ===")
    # Nota: Este m√©todo pode variar dependendo da vers√£o do Agno
    # Consulte a documenta√ß√£o oficial para o m√©todo correto de busca
    try:
        results = memory_manager.search_memories(query=query, user_id=user_id)
        pprint(results)
    except AttributeError:
        print("M√©todo de busca n√£o dispon√≠vel nesta vers√£o. Use get_user_memories() para ver todas as mem√≥rias.")

if __name__ == "__main__":
    print("üß† Exemplo de MemoryManager do Agno com Instru√ß√µes Personalizadas")
    print("=" * 70)
    
    # Executar exemplos
    exemplo_captura_memoria_texto()
    exemplo_captura_memoria_mensagens()
    
    # Buscar mem√≥rias criadas
    buscar_memorias_usuario("cliente_exemplo@email.com")
    buscar_memorias_usuario("cliente_exemplo_2@email.com")
    
    # Exemplo de busca contextual
    exemplo_busca_contextual("cliente_exemplo@email.com", "hor√°rio funcionamento")
    
    print("\n‚úÖ Exemplos conclu√≠dos!")